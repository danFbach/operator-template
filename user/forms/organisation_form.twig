{% extends parent_template %}

{% block title %}
    {% if record|default is not empty and record.exists %}
        {{ record.name }} - {{ Lang.get('user.profile') }}
    {% else %}
        {{ Lang.get('general.add_item', {'item': Lang.choice('user.organisation', 1)}) }}
    {% endif %}
{% endblock %}

{% block precontent %}

    {% if record.exists and (auth_user().hasPermission('update.organisation') or auth_user().hasPermission('delete.organisation')) %}
        <div class="sp-quick-actions">
            <ul>
                <li class="sp-action-group sp-inline-block">
                    {% if auth_user().hasPermission('update.organisation') %}
                        <button class="sp-action merge-organisation">
                            <i class="fas fa-code-merge"></i>&nbsp; {{ Lang.get('general.merge') }}
                        </button><!--
                    {% else %}
                        <!--
                    {% endif %}
                    {% if auth_user().hasPermission('delete.organisation') %}
                        --><button class="sp-action delete-organisation" title="{{ Lang.get('general.delete') }}">
                            <i class="fas fa-trash"></i>
                        </button>
                    {% else %}
                        -->
                    {% endif %}
                </li>
            </ul>
        </div>
    {% endif %}

    <div class="sp-alert sp-alert-success sp-alert-sticky sp-hidden action">
        {{ Lang.get('messages.success_action') }}
    </div>
    <div class="sp-alert sp-alert-error sp-alert-sticky sp-hidden action">
        {{ Lang.get('messages.error_action') }}
    </div>
{% endblock %}

{% block content %}

    {% if record|default is not empty and record.exists %}
        {% include 'operator.' ~ template ~ '.user.forms.organisation_tabs' %}

        {{ form_model(record, {'route': [ 'user.operator.organisation.update', record.id], 'method': 'PUT', 'class': 'validate'}) }}
    {% else %}
        {{ form_open({'route': 'user.operator.organisation.store', 'class': 'validate'}) }}
    {% endif %}
        <div class="sp-form-container sp-form-container-t-0">

            {% if record.exists %}
                {% if brand_count() > 1 %}
                    <div class="sp-form-row">
                        {{ form_label('brand_id', Lang.choice('core.brand', 1)) }}
                        <div class="sp-input-container">
                            {{ record.brand.name }}
                            <input type="hidden" name="brand_id" value="{{ record.brand_id }}" />
                        </div>
                    </div>
                {% else %}
                    <input type="hidden" name="brand_id" value="{{ record.brand_id }}" />
                {% endif %}
            {% else %}
                {% if brand_count() > 1 %}
                    <div class="sp-form-row">
                        {{ form_label('brand_id', Lang.choice('core.brand', 1)) }}
                        <div class="sp-input-container">
                            {{ form_select('brand_id', assignedBrands.pluck('name', 'id'), Config.get('settings.default_brand')) }}
                        </div>
                    </div>
                {% else %}
                    <input type="hidden" name="brand_id" value="{{ Config.get('settings.default_brand') }}" />
                {% endif %}
            {% endif %}

            <div class="sp-form-row">
                {{ form_label('name', Lang.get('general.name')) }}
                <div class="sp-input-container">
                    {{ form_text('name', null, {'autofocus': 'autofocus'}) }}
                </div>
            </div>

            <div class="sp-form-row">
                {{ form_label('country', Lang.get('user.country')) }}
                <div class="sp-input-container">
                    {{ form_select('country', {0: '-- ' ~ mb_ucfirst(Lang.get('general.not_set')) ~ ' --'} + countries(),
                        record.exists ? record.country : Config.get('settings.default_country')) }}
                </div>
            </div>

            {# Check whether we should allow organisations to change their default language #}
            {% if Config.get('settings.language_frontend_toggle') %}
                <div class="sp-form-row">
                    {{ form_label('language_code', Lang.choice('general.language', 1)) }}
                    <div class="sp-input-container">
                        {{ form_select('language_code', {0: '-- ' ~ mb_ucfirst(Lang.get('general.not_set')) ~ ' --'} + languages,
                            record.exists ? record.language_code : LanguageFactory.getUserDefault()) }}
                    </div>
                </div>
            {% endif %}

            <div class="sp-form-row">
                {{ form_label('timezone', Lang.get('general.timezone')) }}
                <div class="sp-input-container">
                    {{ form_select('timezone', {0: '-- ' ~ mb_ucfirst(Lang.get('general.not_set')) ~ ' --'} + timezones(),
                        record.exists ? record.timezone : Config.get('settings.default_timezone')) }}
                </div>
            </div>

            <div class="sp-form-row sp-form-full sp-form-customfields">
                {{ form_label('notes', Lang.choice('general.note', 2)) }}
                <div class="sp-input-container">
                    {{ form_editor('notes') }}
                </div>
            </div>

            <div class="sp-form-row sp-form-full">
                {{ form_label('domain', Lang.choice('general.domain', 2)) }}
                <div class="sp-input-container">
                    <select name="domain[]" multiple="multiple">
                        {% for domain in record.domains %}
                            <option selected="selected" data-data='{{ domain|json_encode(constant('JSON_FORCE_OBJECT')) }}' value='{{ domain.domain }}'>
                                {{ domain.domain }}
                            </option>
                        {% endfor %}
                    </select>
                    <div class="sp-description">{{ Lang.get('user.organisation_domain_desc') }}</div>
                </div>
            </div>

        </div>

        {% if customfields is not empty %}
            <div class="organisation-customfields">
                <h2>{{ Lang.get('general.custom_fields') }}</h2>

                <div class="sp-form-container sp-form-container-b-0">
                    {% include 'operator.' ~ template ~ '.forms.custom_fields' with {'operator': true} %}
                </div>
            </div>
        {% endif %}

        <div class="sp-form-button sp-fixed-bottom">
            {{ form_submit(Lang.choice('general.submit', 1)) }}
        </div>

    {{ form_close() }}

{% endblock %}

{% block scripts_footer %}
    {% if jsValidator|default is not empty %}
        {{ jsValidator|raw }}
    {% endif %}

    <!-- WYSIWYG Editor -->
    <script src="{{ asset_rev('resources/assets/libs/editor.min.js') }}"></script>
    <script src="{{ asset_rev('resources/assets/general/js/editor_config.js') }}"></script>

    <!-- Custom fields -->
    <script src="{{ asset_rev('resources/assets/general/js/customfields.js') }}"></script>

    <script src="{{ asset_rev('resources/assets/operator/js/randomPassword.js') }}"></script>

    <script type="text/javascript">
        $(document).ready(function() {
            // Enable hide/show password toggle
            $('input[type=password]').hideShowPassword();

            // Date picker
            $('.datepicker').datepicker();

            // Only applies when creating an organisation as the brand can be changed
            {% if not record.exists %}
                // Brand and custom fields membership assignment
                var brandCustomFields = JSON.parse('{{ brandCustomFields|raw }}');

                // Change the custom fields to show when the brand is changed
                $(':input[name="brand_id"]').on('change', function() {
                    var brandId = $(this).val();

                    // Check if each field exists in the currently selected brand
                    $('[data-field]').each(function () {
                        if (brandCustomFields[brandId].indexOf($(this).data('field')) === -1) {
                            $(this).find(':input').prop('disabled', true);
                            $(this).hide();
                        } else {
                            $(this).find(':input').prop('disabled', false);

                            var dependsOn = $(this).data('depends-on-option');
                            if (typeof dependsOn === 'number') {
                                $('option[value="'+dependsOn+'"]:selected').is(':visible') ? $(this).show() : $(this).hide();
                            } else {
                                $(this).show();
                            }
                        }
                    });

                    // Do we have any fields for this brand? If not, just hide the section
                    if (brandCustomFields[brandId].length) {
                        $('.organisation-customfields').show();
                    } else {
                        $('.organisation-customfields').hide();
                    }
                });

                // Run above code when page loads to remove any fields it shouldn't show for default brand
                $(':input[name="brand_id"]').trigger('change');
            {% endif %}

            /**
             * Add domains for organisation.
             */
            $('select[name="domain[]"]').selectize({
                plugins: ['remove_button'],
                valueField: 'domain',
                labelField: 'domain',
                searchField: [ 'domain' ],
                create: true,
                createFilter: function(input) {
                    return input.length <= 191;
                },
                maxItems: null,
            });

            {% if record.exists %}
                // Delete organisation button
                $('.delete-organisation').on('click', function() {
                    var showAlert = function () {
                        return (new deleteAlert({}))
                            .fireDefault('{{ Lang.choice('user.organisation', 1) }}', '{{ record.name }}', {});
                    };

                    showAlert().then(function (result) {
                        if (result.value) {
                            // Go to user list
                            $('body').append($('<form class="delete" action="' + laroute.route('user.operator.organisation.destroy_redirect', { id: {{ record.id }} }) + '" method="POST">'
                                + '<input name="_method" type="hidden" value="DELETE" />'
                                + '<input name="_token" type="hidden" value="' + $('meta[name=csrf_token]').prop('content') + '">'
                                + '</form>'));

                            $('form.delete').trigger('submit');

                            // Reshow with loading state.
                            showAlert();
                            Swal.showLoading();
                        }
                    });
                });

                // Merge organisation button
                $('.merge-organisation').on('click', function() {
                    Swal.fire({
                        title: '{{ Lang.get('user.merge_organisations') }}',
                        html: '<div>'
                            + '<div class="sp-alert sp-alert-warning sp-text-left">'
                            + '<i class="fas fa-exclamation-triangle" aria-hidden="true"></i> &nbsp;'
                            + Lang.get('messages.cannot_be_undone')
                            + '</div>'
                            + '<ul class="sp-list-none sp-p-0 sp-m-0 sp-border sp-border-secondary sp-rounded sp-text-left sp-overflow-y-auto" style="max-height: 15rem;">'
                            + '<li class="sp-py-1 sp-px-3">'
                                + '{{ record.name }}<br>'
                                + '<span class="sp-description">{{ Lang.get('user.owner') }}: {{ record.owner is not empty ? record.owner.email.formatted_name : Lang.get('general.none') }}'
                                + '{{ record.owner.email is not empty ? ('&lt;' ~ record.owner.email ~ '&gt;')|raw : ''}}</span>'
                            + '</li>'
                            + '</ul><br />'
                            + '<label>{{ Lang.get('user.merge_organisation_into') }}</label>'
                            + '<select id="swal2-merge-select"><option></option></select>'
                            + '</div>',
                        confirmButtonText: '{{ Lang.get('general.merge') }}',
                        showCancelButton: true,
                        didOpen: function () {
                            $(Swal.getHtmlContainer().querySelector('#swal2-merge-select')).selectize({
                                valueField: 'id',
                                labelField: 'name',
                                searchField: ['name'],
                                create: false,
                                placeholder: '{{ Lang.get('user.search_for_organisation') }}',
                                render: {
                                    item: function (item, escape) {
                                        return '<div class="item">' +
                                            escape(item.name) +
                                            '<br /><span class="sp-description">{{ Lang.get('user.owner') }}: ' +
                                            (item.owner ?
                                                escape(item.owner.formatted_name + (item.owner.email ? ' <' + item.owner.email + '>' : '') || '') : '{{ Lang.get('general.none') }}') +
                                            '</span></div>';
                                    },
                                    option: function (item, escape) {
                                        return '<div>' +
                                            escape(item.name) +
                                            '<br /><span class="sp-description">{{ Lang.get('user.owner') }}: ' +
                                            (item.owner ?
                                                escape(item.owner.formatted_name + (item.owner.email ? ' <' + item.owner.email + '>' : '') || '') : '{{ Lang.get('general.none') }}') +
                                            '</span></div>';
                                    }
                                },
                                load: function (query, callback) {
                                    if (! query.length) {
                                        return callback();
                                    }

                                    $.ajax({
                                        url: "{{ route('user.organisation.search') }}",
                                        type: 'GET',
                                        dataType: 'json',
                                        data: {
                                            brand_id: {{ record.brand_id }},
                                            q: query,
                                        },
                                        error: function () {
                                            callback();
                                        },
                                        success: function (res) {
                                            // Remove current organisation from results.
                                            var data = res.data.filter(function(organisation) {
                                                return organisation.id !== {{ record.id }};
                                            });

                                            callback(data);
                                        }
                                    });
                                }
                            });
                        },
                        showLoaderOnConfirm: true,
                        preConfirm: function () {
                            if (! $('#swal2-merge-select').val()) {
                                Swal.showValidationMessage(Lang.get('messages.general_error'));
                            }

                            return $.ajax({
                                url: '{{ route('user.operator.organisation.merge') }}',
                                type: 'POST',
                                data: {
                                    'mergedId': $('#swal2-merge-select').val(),
                                    'mergingId': {{ record.id }}
                                },
                                dataType: 'json'
                            }).then(function (response) {
                                // Redirect to merged organisation.
                                window.location.href = response.data;
                            });
                        },
                        allowOutsideClick: false,
                    });
                });
            {% endif %}
        });
    </script>
{% endblock %}
